package com.transformedge.apps.controller;

import java.security.Principal;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.transformedge.apps.appconfiguration.CsvConfiguration;
import com.transformedge.apps.appconfiguration.Translator;
import com.transformedge.apps.entity.Employee;
import com.transformedge.apps.entity.Role;
import com.transformedge.apps.exceptions.ErrorFormInfo;
import com.transformedge.apps.loggedinfo.IAuthenticationFacade;
import com.transformedge.apps.loginlogouthandler.ActiveUserStore;
import com.transformedge.apps.model.EmployeeModel;
import com.transformedge.apps.model.EmployeeResponse;
import com.transformedge.apps.model.EmployeeWithRoleModel;
import com.transformedge.apps.model.UserLoginInfoResponse;
import com.transformedge.apps.repository.UserRepository;
import com.transformedge.apps.service.EmployeeService;
import com.transformedge.apps.service.UserLoginInfoService;

@RestController
@CrossOrigin
@RequestMapping(value="${spring.data.rest.base-path}/employee_controller")
public class EmployeeController {

	@SuppressWarnings("unused")
	@Autowired
	private CsvConfiguration csvConfiguration;

	@Autowired
	private EmployeeService employeeServiceIMPL;
	
	@Autowired
	UserRepository userRepository;

	@Autowired
	private UserLoginInfoService userLoginInfoService;

	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@PostMapping("/saveEmployee")
	public ResponseEntity<?> registerEmployee(@RequestBody @Valid EmployeeModel employeeModel, HttpServletRequest request) {
		logger.info("INSIDE EmployeeController START METHOD registerEmployee :");
		final Employee registeredEmployee = employeeServiceIMPL.registerEmployee(employeeModel);
		ErrorFormInfo errorInfo = null;
		if (registeredEmployee != null) {
			String successMsg = Translator.toLocale("user.added.successfully");
			errorInfo = new ErrorFormInfo(HttpStatus.OK, true, request.getRequestURI(), successMsg, null);
			return new ResponseEntity<>(errorInfo, HttpStatus.OK);
		}
		return new ResponseEntity<>(errorInfo, HttpStatus.RESET_CONTENT);
	}

	@GetMapping(value="/get_all_employee")
	public ResponseEntity<?> getAllRegisteredEmployee(
			@RequestParam(required = false,defaultValue="1") int pageNum,
			@RequestParam(required = false,defaultValue="2") int pageSize,
			HttpServletRequest request){
		logger.info("INSIDE EmployeeController START METHOD getAllRegisteredEmployee:");
		EmployeeResponse employeeList = employeeServiceIMPL.getAllRegisteredEmployee(pageNum,pageSize);
		ErrorFormInfo errorInfo = null;
		if(employeeList != null){
			return new ResponseEntity<>(employeeList, HttpStatus.OK);
		}else{
			String successMsg = Translator.toLocale("user.list.notExist");
			errorInfo = new ErrorFormInfo(HttpStatus.NOT_FOUND, true, request.getRequestURI(), successMsg, null);
		}
		return new ResponseEntity<>(errorInfo, HttpStatus.NOT_FOUND);
	}

	@GetMapping(value="get_employee_by_id/{id}")
	public ResponseEntity<?> getEmployeeById(@PathVariable long id,HttpServletRequest request){
		logger.info("INSIDE EmployeeController AND CALLING getEmployeeById METHOD :");
		Employee employeeList = employeeServiceIMPL.getEmployeeById(id);
		if(employeeList != null){
			return new ResponseEntity<>(employeeList, HttpStatus.OK);
		}
		return new ResponseEntity<>(employeeList, HttpStatus.NOT_FOUND);
	}
	
	@GetMapping(value="get_employee_roles_id/{id}")
	public ResponseEntity<?> getEmployeeRolesById(@PathVariable long id,HttpServletRequest request){
		logger.info("INSIDE EmployeeController AND CALLING getEmployeeRolesById METHOD :");
		List<Role> roles = employeeServiceIMPL.getEmployeeRolesById(id);
		if(roles != null){
			return new ResponseEntity<>(roles, HttpStatus.OK);
		}
		return new ResponseEntity<>(roles, HttpStatus.NOT_FOUND);
	}


	@PutMapping("/update_employee/{id}")
	public ResponseEntity<?> updateEmployee(@RequestBody EmployeeModel employeeModel, @PathVariable long id, HttpServletRequest request) {
		final Employee employee = employeeServiceIMPL.updateEmployee(employeeModel,id);
		ErrorFormInfo errorInfo = null;
		if (employee != null) {
			String successMsg = Translator.toLocale("user.updated.successfully");
			errorInfo = new ErrorFormInfo(HttpStatus.OK, true, request.getRequestURI(), successMsg, null);
			return new ResponseEntity<>(errorInfo, HttpStatus.OK);
		}
		return new ResponseEntity<>(errorInfo, HttpStatus.NOT_MODIFIED);
	}	

	@GetMapping(value="/get_loggedin_employee")
	public ResponseEntity<?> getLoggedInEmployeeByMailId(Principal principle){
		Employee employeeByMail =  employeeServiceIMPL.getEmployeeByMailId(principle.getName());
		if(employeeByMail != null){
			return new ResponseEntity<>(employeeByMail, HttpStatus.OK);
		}
		return new ResponseEntity<>(employeeByMail, HttpStatus.NOT_FOUND);
	}
	
	@GetMapping(value="/get_user_by_mailid")
	public ResponseEntity<?> getEmployeeByMailId(
			@RequestParam(required = true) String mailId){
		Employee employeeByMail =  employeeServiceIMPL.getEmployeeByMailId(mailId);
		if(employeeByMail != null){
			return new ResponseEntity<>(employeeByMail, HttpStatus.OK);
		}
		return new ResponseEntity<>(employeeByMail, HttpStatus.NOT_FOUND);
	}

	/*@GetMapping(value="/get_loggedin_info")
	public ResponseEntity<?> getLoggedInEmployeeByMailId(Principal principle){
		List<UserLoginInfo> loggedInUserInfo =  userLoginInfoService.getLoggedInEmployeeByMailId(principle.getName());
		if(loggedInUserInfo != null){
			return new ResponseEntity<>(loggedInUserInfo, HttpStatus.OK);
		}
		return new ResponseEntity<>(loggedInUserInfo, HttpStatus.NOT_FOUND);
	}*/


	@GetMapping(value="/get_loggedin_user_info")
	public ResponseEntity<?> getLoggedInEmployeeInfoByMailId(
			@RequestParam(required = false,defaultValue="1") int page_number,
			@RequestParam(required = false,defaultValue="10") int pageSize,
			HttpServletRequest request){
		logger.info("INSIDE EmployeeController START METHOD getLoggedInEmployeeInfoByMailId:");
		Employee employeeByMail =  employeeServiceIMPL.getEmployeeByMailId(authenticationFacade.getAuthentication().getName());
		if(employeeByMail != null){
			UserLoginInfoResponse loggedInUserInfo =  userLoginInfoService.getLoggedInEmployeeByMailId(authenticationFacade.getAuthentication().getName(),page_number,pageSize);
			if(loggedInUserInfo != null){
				employeeByMail.setUserLoginDetailsInfo(loggedInUserInfo);
				return new ResponseEntity<>(employeeByMail, HttpStatus.OK);
			}
		}
		return new ResponseEntity<>(employeeByMail, HttpStatus.NOT_FOUND);
	}

	/*================= testing only ==================*/
	/*@GetMapping(value="/get_loggedin_user_info")
	public ResponseEntity<?> getLoggedInUserInfo(){
		return new ResponseEntity<>("{   \"employeeId\": 1,   \"employeeFirstName\": \"Avi\",   \"employeeLastName\": \"Singh\",   \"employeeGender\": null,   \"employeeMailId\": \"avinash.singh@transformedge.com\",   \"employeeCode\": \"EC050\",   \"employeePhone\": \"9885810820\",   \"employeeDesignation\": \"Sr. Software Developer\",   \"employeeStatus\": \"Active\",   \"userLoginDetailsInfo\": [     {       \"id\": 5,       \"userName\": \"avinash.singh@transformedge.com\",       \"userId\": 1,       \"loginDate\": \"2019-04-20\",       \"loginTime\": \"17:13:13\",       \"logoutTime\": \"17:16:29\",       \"userSessionId\": \"A8ABA95D75BE2C39C8A7A69AEBCD8488\",       \"systemIpAddress\": \"0:0:0:0:0:0:0:1\"     },     {       \"id\": 6,       \"userName\": \"madhu.shree@transformedge.com\",       \"userId\": 2,       \"loginDate\": \"2019-04-20\",       \"loginTime\": \"17:15:09\",       \"logoutTime\": \"17:15:49\",       \"userSessionId\": \"2F7F35DC84E2DA6048B44C9C464A05B1\",       \"systemIpAddress\": \"0:0:0:0:0:0:0:1\"     },     {       \"id\": 7,       \"userName\": \"madhu.shree@transformedge.com\",       \"userId\": 2,       \"loginDate\": \"2019-04-20\",       \"loginTime\": \"17:35:03\",       \"logoutTime\": null,       \"userSessionId\": \"14DFA545A1F3ECA6FA380E5BD9127EE9\",       \"systemIpAddress\": \"0:0:0:0:0:0:0:1\"     },     {       \"id\": 8,       \"userName\": \"avinash.singh@transformedge.com\",       \"userId\": 1,       \"loginDate\": \"2019-04-21\",       \"loginTime\": \"22:01:30\",       \"logoutTime\": \"22:01:34\",       \"userSessionId\": \"ED731C244ED0E384A1D3FFD02020F547\",       \"systemIpAddress\": \"0:0:0:0:0:0:0:1\"     },     {       \"id\": 9,       \"userName\": \"avinash.singh@transformedge.com\",       \"userId\": 1,       \"loginDate\": \"2019-04-22\",       \"loginTime\": \"13:00:45\",       \"logoutTime\": \"13:04:00\",       \"userSessionId\": \"33389770FB2DD4D76191E3FAFDE4C298\",       \"systemIpAddress\": \"0:0:0:0:0:0:0:1\"     },     {       \"id\": 10,       \"userName\": \"avinash.singh@transformedge.com\",       \"userId\": 1,       \"loginDate\": \"2019-04-22\",       \"loginTime\": \"14:24:56\",       \"logoutTime\": \"14:30:46\",       \"userSessionId\": \"8AE7558069183FDDE25C2DE60A431DE3\",       \"systemIpAddress\": \"0:0:0:0:0:0:0:1\"     },     {       \"id\": 11,       \"userName\": \"avinash.singh@transformedge.com\",       \"userId\": 1,       \"loginDate\": \"2019-04-22\",       \"loginTime\": \"14:31:53\",       \"logoutTime\": null,       \"userSessionId\": \"9EB59C1F1DB4FC76C66A4C0FA03821EA\",       \"systemIpAddress\": \"0:0:0:0:0:0:0:1\"     }   ],   \"tasks\": [     {       \"taskId\": 1,       \"taskName\": \"Spirax Sarco\",       \"taskDescription\": \"Ewaybill Management\",       \"taskPriority\": \"Medium\",       \"taskSupervisor\": \"avinash.singh@transformedge.com\",       \"taskStatus\": \"Developement Start\",       \"taskAssigner\": \"anonymousUser\",       \"taskDone\": false,       \"employee\": [],       \"taskDailyComments\": [         {           \"id\": 2,           \"taskCommentDate\": \"2019-04-19\",           \"taskWorkingHours\": \"2 hours\",           \"taskComments\": \"my second comments\",           \"taskAssignedBy\": \"avinash.singh@transformedge.com\",           \"taskCommentedBy\": \"avinash.singh@transformedge.com\",           \"taskStatus\": \"Developement Start\",           \"task\": []         },         {           \"id\": 1,           \"taskCommentDate\": \"2019-04-19\",           \"taskWorkingHours\": \"2 hours\",           \"taskComments\": \"my test comments\",           \"taskAssignedBy\": \"avinash.singh@transformedge.com\",           \"taskCommentedBy\": \"avinash.singh@transformedge.com\",           \"taskStatus\": \"Developement Start\",           \"task\": []         },         {           \"id\": 3,           \"taskCommentDate\": \"2019-04-19\",           \"taskWorkingHours\": \"2 hours\",           \"taskComments\": \"my third comments\",           \"taskAssignedBy\": \"avinash.singh@transformedge.com\",           \"taskCommentedBy\": \"avinash.singh@transformedge.com\",           \"taskStatus\": \"Developement Start\",           \"task\": []         }       ]     },     {       \"taskId\": 2,       \"taskName\": \"Roots System\",       \"taskDescription\": \"Ewaybill Management\",       \"taskPriority\": \"Medium\",       \"taskSupervisor\": \"avinash.singh@transformedge.com\",       \"taskStatus\": \"initialize\",       \"taskAssigner\": \"anonymousUser\",       \"taskDone\": false,       \"employee\": [],       \"taskDailyComments\": []     }   ],   \"employeeFileDetailsDb\": {     \"id\": \"8cc00995-b53f-4433-b6e3-a5407580ff51\",     \"fileName\": \"TEImages.png\",     \"fileType\": \"image/png\",     \"fileDownloadUri\": \"http://192.168.1.8:8089/home/file_controller/downloadfile/8cc00995-b53f-4433-b6e3-a5407580ff51\",     \"size\": 24856,     \"data\": \"\",     \"employee\": 1   } }", HttpStatus.OK);
	}*/

	@GetMapping(value="/search_by_conditions")
	public ResponseEntity<?> searchEmployeeByCondition(@RequestParam("mailId") String mailId,
			@RequestParam("projectName") String projectName,
			@RequestParam(required = false, defaultValue="1") int pageNumber,
			@RequestParam(required = false, defaultValue="10") int pageSize,
			HttpServletRequest request){
		logger.info("INSIDE EmployeeController START METHOD searchEmployeeByCondition:");
		EmployeeResponse employeeList = employeeServiceIMPL.searchEmployeeByCondition(mailId,projectName,pageNumber,pageSize);
		if(employeeList != null){
			return new ResponseEntity<>(employeeList,HttpStatus.OK);
		}
		return new ResponseEntity<>(employeeList,HttpStatus.RESET_CONTENT);
	}

	@DeleteMapping(value="/delete_role_employee_id")
	public ResponseEntity<?> deleteEmployeeRoleById(@RequestBody EmployeeWithRoleModel model, HttpServletRequest request){
		logger.info("INSIDE EmployeeController deleteEmployeeRoleById CALLED !!");
		Employee employee = employeeServiceIMPL.deleteRoleByEmployeeId(model.getRoleName(), model.getEmployeeId());
		ErrorFormInfo errorInfo = null;
		if (employee != null) {
			String successMsg = Translator.toLocale("role.deleted.successfully");
			successMsg = successMsg.replace("$roleName", model.getRoleName());
			errorInfo = new ErrorFormInfo(HttpStatus.OK, true, request.getRequestURI(), successMsg, null);
			return new ResponseEntity<>(errorInfo, HttpStatus.OK);
		}
		return new ResponseEntity<>(errorInfo, HttpStatus.NOT_MODIFIED);
	}

	@GetMapping(value="/test")
	public String testEmployeeController(){
		return "hello Employee !!";
	}

	@Autowired
	private IAuthenticationFacade authenticationFacade;

	@RequestMapping(value = "/username", method = RequestMethod.GET)
	@ResponseBody
	public String currentUserNameSimple() {
		Authentication authentication = authenticationFacade.getAuthentication();
		return authentication.getName();
	}
	
	@Autowired
    ActiveUserStore activeUserStore;
 
    @GetMapping(value = "/loggedUsers")
    public List<String> getLoggedUsers(Locale locale) {
        return activeUserStore.getUsers();
    }

}
